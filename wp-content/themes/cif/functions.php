<?php

/**
 * Contains utility functions and functions which augment the default
 * behavior of WordPress to make it more appropriate for CIF's needs.
 *
 * This file follows the coding standards detailed here:
 * http://codex.wordpress.org/WordPress_Coding_Standards
 */


/**
 * Defines constants for use throughout this theme.
 *
 * See constants.php for more information on what's defined.
 */
require_once 'constants.php';


/**
 * Defines functions for displaying forms.
 *
 * See forms/functions.php for more information on what's available.
 */
require_once 'forms/functions.php';


/**
 * Registers custom post types with semesterly archives.
 *
 * An Announcements post type is registered with an archive at {site_url}/announcements
 * Board and Floor Minutes post types are registered with a combined archive at {site_url}/minutes
 *
 * Semesterly archives can be found at {site_url}/{post_type}/{spring|fall}/year
 * Example: {site_url}/announcements/spring/2013
 *
 * A list of links for semesters with posts can be generated by calling semesterly_archive_menu().
 */
require_once 'semesterly-post-types/semesterly-posts.php';


/**
 * Registers custom shortcodes for use in the WordPress editor.
 *
 * See shortcodes/registered-shortcodes.php and the files in the
 * shortcodes directory for more information on what's available.
 */
require_once 'shortcodes/registered-shortcodes.php';


/**
 * Adds custom options pages to WordPress.
 */
require_once 'options-pages/add-options-pages.php';



/**
 * Initializes the CIF theme by:
 * Registering the primary and secondary navigation menus
 * Uses the main stylesheet to style the WordPress editor
 */
function cif_init() {
	// Register the primary and secondary navigation menus
	register_nav_menus( array(
		'primary'	=> 'Header navigation',
		'secondary'	=> 'Footer navigation',
	) );
	
	// Add CIF styles to the WordPress editor if the current user can edit pages
	if ( current_user_can( 'edit_pages' ) )
		add_editor_style( STYLESHEET_URL );
}
add_action( 'init', 'cif_init' );



// Remove unnecessary metadata that gets output by wp_head()
remove_action( 'wp_head', 'rsd_link' );
remove_action( 'wp_head', 'wlwmanifest_link' );
// We don't need people with malicious intent to know which version of WordPress we're running
remove_action( 'wp_head', 'wp_generator' );

// Adds feed information to the document head
add_theme_support( 'automatic-feed-links' );



/**
 * Removes specific menu items from the WordPress admin sidebar.
 * When modifying the menu items that this function removes, please also
 * remove any relevant menus removed from the admin bar by remove_admin_bar_menus().
 */
function remove_admin_sidebar_menus() {
	// Array of arrays for admin menu items
	global $menu;
	
	/**
	 * List of admin sidebar menu items to remove for all users.
	 * Posts was removed in favor of dividing all serialized data between the Announcements, Board Minutes, and Floor Minutes post types.
	 */
	$to_remove = array( 'Posts' );
	
	// Loop through the admin menu in reverse order, removing the menu items we don't want.
	// Looping forwards and then reseting the array pointer back to the beginning doesn't
	// seem to work, so we're looping backwards.
	end( $menu );
	while ( prev( $menu ) ) {
		$menu_item_key = key( $menu );
		$menu_item_name = $menu[ $menu_item_key ][0];
		
		// Remove the current menu item from the global menu array if we specified it
		if ( in_array( $menu_item_name, $to_remove ) )
			unset( $menu[ $menu_item_key ] );
	}
}
add_action( 'admin_menu', 'remove_admin_sidebar_menus' );

/**
 * Removes specific menu items from the WordPress admin bar.
 * The admin bar appears above all pages on the site for logged in admins.
 * When modifying the menu items that this function removes, please also
 * remove any relevant menus removed from the admin sidebar by remove_admin_menus().
 *
 * The id of a link in the admin menu can be found by looking at its HTML id in
 * the markup and removing the "wp-admin-bar-" prefix from it. For example, the node id
 * of the "new post" button is "new-post" because its HTML id is "wp-admin-bar-new-post."
 */
function remove_admin_bar_menus() {
	global $wp_admin_bar;

	/**
	 * List of admin bar menu items to remove for all users.
	 * new-post was removed in favor of dividing all serialized data between the Announcements, Board Minutes, and Floor Minutes post types.
	 */
	$to_remove = array( 'new-post' );

	foreach ( $to_remove as $node ) {
		$wp_admin_bar->remove_node( $node );
	}

}
add_action( 'wp_before_admin_bar_render', 'remove_admin_bar_menus' );



/**
 * Remove certain styles from the visual editor.
 * The default styles (at least in WP 3.5) are: p,address,pre,h1,h2,h3,h4,h5,h6
 * 
 * @param array $init The array of initial settings for the visual editor.
 * @return array The updated initial settings.
 */
function cif_visual_editor_settings( $init ) {
	// Defines which styles should be available through the visual editor
	$init['theme_advanced_blockformats'] = 'p,pre,h2,h3,h4,h5,h6';
	
	return $init;
}
add_filter( 'tiny_mce_before_init', 'cif_visual_editor_settings' );



/**
 * Returns the post type for the queried data on the current page.
 * This is useful for loading template parts for custom post types
 * before entering the loop and outputting those posts.
 *
 * @return string The post type of the queried data for the current page.
 */
function get_post_type_outside_loop() {
	global $wp_query;

	if ( isset( $wp_query->query['post_type'] ) )
		return $wp_query->query['post_type'];
	return '';
}



/**
 * Reformats WordPress's caption markup to make it more compatible with
 * our CSS styles. By default, WordPress explicitely sets dimensions on elements,
 * making it difficult to set dimensions through CSS.
 *
 * @param string $output The markup to be output.
 * @param array $attr The attributes for the caption.
 * @param string $content The content between the [caption] tags.
 * @return string The reformatted markup.
 */
function cif_caption_markup( $output, $attr, $content ) {
	// Don't handle captions in feeds
	if ( is_feed() )
		return $output;

	// Default arguments
	$defaults = array(
		'id'      => '',
		'align'   => 'alignnone',
		'width'   => '',
		'caption' => '',
	);

	// Merge the defaults with user input
	$attr = shortcode_atts( $defaults, $attr );

	// Return the content between the [caption] tags if the width is less than 1 or there's no caption
	if ( 1 > $attr['width'] || empty( $attr['caption'] ) )
		return $content;

	// Construct the caption attributes
	$attributes = '';
	if ( ! empty( $attr['id'] ) )
		$attributes .= ' id="' . esc_attr( $attr['id'] ) . '"';
	$attributes .= ' class="wp-caption ' . esc_attr( $attr['align'] ) . '"';

	$output = '<div' . $attributes .'>';

	// Apply shortcodes to the caption content
	$output .= do_shortcode( $content );

	// Use a "caption" class on the caption text
	$output .= '<p class="caption">' . $attr['caption'] . '</p>';

	$output .= '</div>';

	return $output;
}
add_filter( 'img_caption_shortcode', 'cif_caption_markup', 10, 3 );
